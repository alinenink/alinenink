{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./home.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./home.component.scss?ngResource\";\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nlet HomeComponent = class HomeComponent {\n  constructor(translate) {\n    this.translate = translate;\n  }\n  ngAfterViewInit() {\n    this.startTypingAnimation();\n    // Ouvir mudanças de idioma globalmente\n    this.translate.onLangChange.subscribe(() => {\n      this.startTypingAnimation();\n    });\n  }\n  startTypingAnimation() {\n    this.translate.get('SUBTITLE').subscribe(translatedText => {\n      this.typeText(translatedText, 'animated-text');\n    });\n  }\n  typeText(text, elementId) {\n    const element = document.getElementById(elementId);\n    let i = 0;\n    if (element) {\n      element.innerHTML = ''; // Limpa o texto existente\n      clearInterval(this.typingInterval); // Evita intervalos sobrepostos\n      this.typingInterval = setInterval(() => {\n        if (i < text.length) {\n          element.innerHTML += text.charAt(i);\n          i++;\n        } else {\n          clearInterval(this.typingInterval);\n        }\n      }, 100); // Velocidade da digitação\n    }\n  }\n  scrollToSection(sectionId) {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  }\n  static {\n    this.ctorParameters = () => [{\n      type: TranslateService\n    }];\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  standalone: true,\n  imports: [CommonModule, TranslateModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"names":["CommonModule","Component","TranslateModule","TranslateService","HomeComponent","constructor","translate","ngAfterViewInit","startTypingAnimation","onLangChange","subscribe","get","translatedText","typeText","text","elementId","element","document","getElementById","i","innerHTML","clearInterval","typingInterval","setInterval","length","charAt","scrollToSection","sectionId","scrollIntoView","behavior","block","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\likka\\Documents\\Projetos Pessoais\\alinenink.github.io\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { AfterViewInit, Component } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  imports: [CommonModule, TranslateModule],\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements AfterViewInit {\r\n  private typingInterval: any;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.startTypingAnimation();\r\n    // Ouvir mudanças de idioma globalmente\r\n    this.translate.onLangChange.subscribe(() => {\r\n      this.startTypingAnimation();\r\n    });\r\n  }\r\n\r\n  startTypingAnimation() {\r\n    this.translate.get('SUBTITLE').subscribe((translatedText: string) => {\r\n      this.typeText(translatedText, 'animated-text');\r\n    });\r\n  }\r\n\r\n  private typeText(text: string, elementId: string) {\r\n    const element = document.getElementById(elementId);\r\n    let i = 0;\r\n\r\n    if (element) {\r\n      element.innerHTML = ''; // Limpa o texto existente\r\n      clearInterval(this.typingInterval); // Evita intervalos sobrepostos\r\n\r\n      this.typingInterval = setInterval(() => {\r\n        if (i < text.length) {\r\n          element.innerHTML += text.charAt(i);\r\n          i++;\r\n        } else {\r\n          clearInterval(this.typingInterval);\r\n        }\r\n      }, 100); // Velocidade da digitação\r\n    }\r\n  }\r\n\r\n  scrollToSection(sectionId: string) {\r\n    const element = document.getElementById(sectionId);\r\n    if (element) {\r\n      element.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n    }\r\n  }\r\n}"],"mappings":";;;AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAAwBC,SAAS,QAAQ,eAAe;AAGxD,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,qBAAqB;AAShE,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAGxBC,YAAoBC,SAA2B;IAA3B,KAAAA,SAAS,GAATA,SAAS;EAAqB;EAElDC,eAAeA,CAAA;IACb,IAAI,CAACC,oBAAoB,EAAE;IAC3B;IACA,IAAI,CAACF,SAAS,CAACG,YAAY,CAACC,SAAS,CAAC,MAAK;MACzC,IAAI,CAACF,oBAAoB,EAAE;IAC7B,CAAC,CAAC;EACJ;EAEAA,oBAAoBA,CAAA;IAClB,IAAI,CAACF,SAAS,CAACK,GAAG,CAAC,UAAU,CAAC,CAACD,SAAS,CAAEE,cAAsB,IAAI;MAClE,IAAI,CAACC,QAAQ,CAACD,cAAc,EAAE,eAAe,CAAC;IAChD,CAAC,CAAC;EACJ;EAEQC,QAAQA,CAACC,IAAY,EAAEC,SAAiB;IAC9C,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAACH,SAAS,CAAC;IAClD,IAAII,CAAC,GAAG,CAAC;IAET,IAAIH,OAAO,EAAE;MACXA,OAAO,CAACI,SAAS,GAAG,EAAE,CAAC,CAAC;MACxBC,aAAa,CAAC,IAAI,CAACC,cAAc,CAAC,CAAC,CAAC;MAEpC,IAAI,CAACA,cAAc,GAAGC,WAAW,CAAC,MAAK;QACrC,IAAIJ,CAAC,GAAGL,IAAI,CAACU,MAAM,EAAE;UACnBR,OAAO,CAACI,SAAS,IAAIN,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC;UACnCA,CAAC,EAAE;QACL,CAAC,MAAM;UACLE,aAAa,CAAC,IAAI,CAACC,cAAc,CAAC;QACpC;MACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX;EACF;EAEAI,eAAeA,CAACC,SAAiB;IAC/B,MAAMX,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAACS,SAAS,CAAC;IAClD,IAAIX,OAAO,EAAE;MACXA,OAAO,CAACY,cAAc,CAAC;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAO,CAAE,CAAC;IAChE;EACF;;;;;;;AA3CW1B,aAAa,GAAA2B,UAAA,EAPzB9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAAClC,YAAY,EAAEE,eAAe,CAAC;EACxCiC,QAAA,EAAAC,oBAAoC;;CAErC,CAAC,C,EACWhC,aAAa,CA4CzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}